<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciamento de Estoque</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f0f0;
        }
        h1, h2 {
            color: #333;
        }
        form {
            background-color: #fff;
            margin: 20px;
            padding: 20px;
            border-radius: 5px;
        }
        label {
            display: block;
            margin-block-end: 10px;
        }
        input[type="text"], input[type="number"], input[type="date"], select {
            inline-size: 100%;
            padding: 10px;
            margin-block-end: 20px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
        input[type="submit"] {
            background-color: #4CAF50;
            color: white;
            padding: 15px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        input[type="submit"]:hover {
            background-color: #45a049;
        }
        table {
            inline-size: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        table, th, td {
            border: 1px solid #ccc;
        }
        th, td {
            padding: 10px;
            text-align: start;
        }
        th {
            background-color: #f2f2f2;
        }
        .details {
            margin-block-end: 20px;
        }
    </style>
</head>
<body>
    
    <h1>Gerenciamento de Estoque</h1>

    <h2>Lista de Movimentações de Estoque</h2>
    <table id="stockMovementsTable">
        <thead>
            <tr>
                <th>ID</th>
                <th>ProdutoID</th>
                <th>Data de Movimentação</th>
                <th>Quantidade</th>
                <th>Tipo</th>
                <th>Descrição</th>
            </tr>
        </thead>
        <tbody>
            <!-- As movimentações de estoque serão inseridas aqui -->
        </tbody>
    </table>

    <h2>Adicionar Movimentação de Estoque</h2>
    <form id="addStockMovementForm">
        <label for="addProdutoID">ID do Produto:</label>
        <input type="number" id="addProdutoID" name="ProdutoID" required>
        <label for="addDataMovimentacao">Data de Movimentação:</label>
        <input type="date" id="addDataMovimentacao" name="DataMovimentacao" required>
        <label for="addQuantidade">Quantidade:</label>
        <input type="number" id="addQuantidade" name="Quantidade" required>
        <label for="addTipo">Tipo (entrada/saída):</label>
        <select id="addTipo" name="Tipo" required>
            <option value="entrada">Entrada</option>
            <option value="saída">Saída</option>
        </select>
        <label for="addDescricao">Descrição:</label>
        <input type="text" id="addDescricao" name="Descricao">
        <input type="submit" value="Adicionar Movimentação">
    </form>

    <h2>Atualizar Movimentação de Estoque</h2>
    <form id="updateStockMovementForm">
        <label for="updateEstoqueID">ID da Movimentação:</label>
        <input type="number" id="updateEstoqueID" name="estoqueID" required>
        <input type="submit" value="Pesquisar">
    </form>

    <div id="updateStockMovementDetails" class="details" style="display: none;">
        <h2>Dados da Movimentação de Estoque</h2>
        <label for="updateProdutoID">ID do Produto:</label>
        <input type="number" id="updateProdutoID" name="ProdutoID" required>
        <label for="updateDataMovimentacao">Data de Movimentação:</label>
        <input type="date" id="updateDataMovimentacao" name="DataMovimentacao" required>
        <label for="updateQuantidade">Quantidade:</label>
        <input type="number" id="updateQuantidade" name="Quantidade" required>
        <label for="updateTipo">Tipo (entrada/saída):</label>
        <select id="updateTipo" name="Tipo" required>
            <option value="entrada">Entrada</option>
            <option value="saída">Saída</option>
        </select>
        <label for="updateDescricao">Descrição:</label>
        <input type="text" id="updateDescricao" name="Descricao">
        <input type="submit" value="Atualizar Movimentação">
    </div>

    <h2>Remover Movimentação de Estoque</h2>
    <form id="removeStockMovementForm">
        <label for="removeEstoqueID">ID da Movimentação:</label>
        <input type="number" id="removeEstoqueID" name="estoqueID" required>
        <input type="submit" value="Remover Movimentação">
    </form>

    <h2>Pesquisar Produto por ID</h2>
    <form id="searchProductForm">
        <label for="searchProductID">ID do Produto:</label>
        <input type="number" id="searchProductID" name="produtoID" required>
        <input type="submit" value="Pesquisar">
    </form>

    <div id="productDetails" class="details">
        <h2>Detalhes do Produto</h2>
        <p><strong>ID do Produto:</strong> <span id="productID"></span></p>
        <p><strong>Nome do Produto:</strong> <span id="productName"></span></p>
        <p><strong>Descrição:</strong> <span id="productDescription"></span></p>
        <p><strong>Preço:</strong> <span id="productPrice"></span></p>
    </div>

    <script>
        // Carregar as movimentações de estoque ao carregar a página
        function loadStockMovements() {
            fetch('/listStockMovements')
                .then(response => response.json())
                .then(stockMovements => {
                    const stockMovementsTableBody = document.querySelector('#stockMovementsTable tbody');
                    stockMovementsTableBody.innerHTML = '';
                    stockMovements.forEach(movement => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${movement.ID}</td>
                            <td>${movement.ProdutoID}</td>
                            <td>${new Date(movement.DataMovimentacao).toLocaleDateString('pt-BR')}</td>
                            <td>${movement.Quantidade}</td>
                            <td>${movement.Tipo}</td>
                            <td>${movement.Descricao}</td>
                        `;
                        stockMovementsTableBody.appendChild(row);
                    });
                })
                .catch(error => console.error('Erro:', error));
        }

        // Carregar os detalhes do produto ao pesquisar por ID
        function fetchProductDetails(produtoID) {
            fetch(`/getProductDetails/${produtoID}`)
                .then(response => response.json())
                .then(product => {
                    document.getElementById('productID').textContent = product.ID;
                    document.getElementById('productName').textContent = product.Nome;
                    document.getElementById('productDescription').textContent = product.Descricao;
                    document.getElementById('productPrice').textContent = product.Preco;
                })
                .catch(error => console.error('Erro:', error));
        }

        // Pesquisar movimentação de estoque por ID e carregar dados para atualização
        document.getElementById('updateStockMovementForm').addEventListener('submit', function (event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const estoqueID = formData.get('estoqueID');
            
            fetch(`/getStockMovementDetails/${estoqueID}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Movimentação de estoque não encontrada');
                    }
                    return response.json();
                })
                .then(stockMovement => {
                    document.getElementById('updateProdutoID').value = stockMovement.ProdutoID;
                    document.getElementById('updateDataMovimentacao').value = stockMovement.DataMovimentacao.split('T')[0]; // Formato YYYY-MM-DD
                    document.getElementById('updateQuantidade').value = stockMovement.Quantidade;
                    document.getElementById('updateTipo').value = stockMovement.Tipo;
                    document.getElementById('updateDescricao').value = stockMovement.Descricao;
                    document.getElementById('updateStockMovementDetails').style.display = 'block';
                })
                .catch(error => {
                    console.error('Erro:', error);
                    alert('Movimentação de estoque não encontrada');
                });
        });

        // Atualizar movimentação de estoque
        document.getElementById('updateStockMovementDetails').addEventListener('submit', function (event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData.entries());
            const estoqueID = data.estoqueID;

            fetch(`/updateStockMovement/${estoqueID}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(response => response.text())
            .then(data => {
                alert(data);
                loadStockMovements(); // Recarregar a tabela após a atualização
                document.getElementById('updateStockMovementDetails').style.display = 'none'; // Ocultar o formulário após a atualização
            })
            .catch(error => console.error('Erro:', error));
        });

        // Remover movimentação de estoque
        document.getElementById('removeStockMovementForm').addEventListener('submit', function (event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const data = Object.fromEntries(formData.entries());
            const estoqueID = data.estoqueID;

            fetch(`/removeStockMovement/${estoqueID}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })
            .then(response => response.text())
            .then(data => {
                alert(data);
                loadStockMovements(); // Recarregar a tabela após a remoção
            })
            .catch(error => console.error('Erro:', error));
        });

        // Carregar as movimentações de estoque ao carregar a página
        document.addEventListener('DOMContentLoaded', function () {
            loadStockMovements();
        });
    </script>
</body>
</html>
